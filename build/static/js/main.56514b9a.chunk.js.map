{"version":3,"sources":["context/Reducer.tsx","context/GlobalState.tsx","Components/CurrentBalance/index.tsx","Components/Transaction/index.tsx","Components/TransationHistory/index.tsx","Components/ActionButton/index.tsx","Components/TransactionInput/index.tsx","View/index.tsx","Config/firebase.js","App.tsx","index.tsx","swDev.js"],"names":["state","action","type","transactions","payload","transaction","currentBalance","param","id","amount","filter","x","initialState","GlobalContext","React","createContext","GlobalProvider","children","useReducer","Reducer","dispatch","Provider","value","addTransaction","a","toString","parseFloat","parseInt","deleteTransaction","CurrentBalance","useContext","className","Transaction","income","expense","map","num","Math","abs","TrasactionHistory","deleteHistory","console","log","length","index","key","description","onClick","ActionButton","props","style","textAlign","marginTop","click","TransactionInput","useState","NaN","userInput","setUserInput","setTrans","e","target","name","preValue","placeholder","required","onChange","floor","random","swal","text","icon","dangerMode","TrackerView","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","App","tokens","setTokens","callToken","messaging","getToken","token","useEffect","checkNoti","askForPermissioToReceiveNotifications","requestPermission","error","body","notification","title","to","axios","method","url","data","headers","Authorization","then","res","catch","ReactDOM","render","StrictMode","document","getElementById","navigator","swUrl","process","window","addEventListener","serviceWorker","register","response","swDev"],"mappings":"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","file":"static/js/main.56514b9a.chunk.js","sourcesContent":["import { StateArray, actionType } from \"../Types/transactionTypes\"\nexport default (state: StateArray, action: actionType) => {\n    switch (action.type) {\n        case \"ADD_TRANSACTION\":\n            return {\n                ...state,\n                transactions: [...state.transactions, action.payload.transaction],\n                currentBalance: action.payload.currentBalance\n            }\n        case \"DELETE_TRANSACTION\":\n            // debugger\n            let { amount, id } = action.payload.param\n            return {\n                ...state,\n                transactions: state.transactions.filter((x) => x.id !== id),\n                currentBalance:action.payload.currentBalance ,\n\n            }\n        default:\n            return state;\n    }\n}","import React, { createContext, useReducer } from 'react'\nimport { transactionArray, StateArray, actionType, deleteTrans1 } from \"../Types/transactionTypes\"\nimport Reducer from \"./Reducer\";\nconst initialState: StateArray = {\n    transactions: [],\n    currentBalance: 0,\n}\ntype contextProps = {\n    currentBalance: number,\n    transaction: transactionArray[]\n    addTransaction: (transaction: transactionArray) => void\n    deleteTransaction: (param: deleteTrans1) => void\n}\n\nexport const GlobalContext = React.createContext<Partial<contextProps>>({})\n\nexport const GlobalProvider = ({ children }: any) => {\n    const [state, dispatch] = useReducer(Reducer, initialState)\n\n    const addTransaction = (transaction: transactionArray) => {\n        let a = transaction.amount.toString()\n        let currentBalance: number = parseFloat(state.currentBalance) + parseInt(a);\n\n        return dispatch({\n            type: \"ADD_TRANSACTION\",\n            payload: { transaction, currentBalance }\n        })\n    }\n    const deleteTransaction = (param: deleteTrans1) => {\n        let a = param.amount.toString()\n        let currentBalance: number = parseFloat(state.currentBalance) - parseInt(a);\n        return dispatch({\n            type: \"DELETE_TRANSACTION\",\n            payload: { param, currentBalance }\n        })\n\n    }\n    return (\n        <GlobalContext.Provider value={{\n            addTransaction,\n            currentBalance: state.currentBalance,\n            transaction: state.transactions,\n            deleteTransaction\n        }}\n        >\n            {children}\n        </GlobalContext.Provider>\n    )\n}","import React, { useContext } from \"react\";\nimport \"./currentBalance.css\";\nimport { GlobalContext } from \"../../context/GlobalState\";\nlet CurrentBalance = () => {\n  const { currentBalance } = useContext(GlobalContext);\n  return (\n    <div className=\"currrntBalance\">\n      <span className=\" Cbalance\"> Current Balance :</span>\n      <p className=\"balance green\">$ {currentBalance}</p>\n    </div>\n  );\n};\nexport default CurrentBalance;","import React, { useContext } from \"react\";\nimport \"./transaction.css\";\nimport { GlobalContext } from \"../../context/GlobalState\";\nlet Transaction = () => {\n    const { transaction } = useContext(GlobalContext);\n\n    let income: number = parseInt(\"0\");\n    let expense: number = 0;\n    {\n        transaction && transaction.map((x) => {\n            if (x.amount > 0) {\n                let a = x.amount\n                let num = a.toString()\n                income = income + parseFloat(num)\n            }\n            else if (x.amount < 0) {\n                let a = x.amount\n                let num = a.toString()\n                expense = expense - parseFloat(num)\n            }\n        });\n    }\n    return (\n        <div className=\"transactionBox\">\n            <div className=\"content\">\n                Income <p className=\"green\">$ {income} </p>\n            </div>\n            <div className=\"content\">\n                Expense <p className=\"red\">$ {Math.abs(expense)} </p>\n            </div>\n        </div>\n    );\n};\nexport default Transaction;","import React, { useState, useContext } from \"react\";\nimport \"./transactionhistory.css\";\nimport { GlobalContext } from \"../../context/GlobalState\";\nlet TrasactionHistory = () => {\n  const { transaction, deleteTransaction } = useContext(GlobalContext);\n  let deleteHistory = (id: number, amount: number) => {\n    console.log(\"Deleted\",id);\n    let param = {\n      amount, id\n    }\n    { deleteTransaction && deleteTransaction(param); }\n  };\n  return (\n    <div className=\"historyWrapper\">\n      {transaction && transaction.length ?\n        transaction.map((x, index) => {\n          console.log(x.id);\n          return x.amount < 0 ? (\n            <div key={index} className=\"historyEx\">\n              <p>{x.description}</p>\n              <p> $ {Math.abs(x.amount)} </p>\n              <span\n                className=\"deleteBtn\"\n                onClick={() => deleteHistory(x.id, x.amount)}\n              >\n                X\n            </span>\n            </div>\n          ) : (\n              <div key={index} className=\"historyIn\">\n                <p>{x.description}</p>\n                <p>$ {x.amount} </p>\n                <span\n                  className=\"deleteBtn\"\n                  onClick={() => deleteHistory(x.id, x.amount)}\n                >\n                  X\n            </span>\n              </div>\n            );\n        })\n        : <p className=\"noHistory\">No History Found !</p>}\n    </div>\n  );\n};\n\nexport default TrasactionHistory;","import React from \"react\";\nimport \"./actionbutton.css\";\nimport { actionBtn } from \"../../Types/transactionTypes\";\nlet ActionButton = (props: any) => {\n  return (\n    <div style={{ textAlign: \"center\", marginTop: \"10px\" }}>\n      <button className=\"addTransaction\" onClick={props.click}>\n        Add Transaction\n      </button>\n    </div>\n  );\n};\nexport default ActionButton;\n","import React, { useState, useContext } from \"react\";\nimport ActionButton from \"../ActionButton\";\nimport { transactionArray } from \"../../Types/transactionTypes\"\n\nimport \"./tranasationInput.css\";\nimport swal from \"sweetalert\";\nimport { GlobalContext } from \"../../context/GlobalState\";\n\nlet TransactionInput = () => {\n    const { addTransaction, transaction } = useContext(GlobalContext);\n\n    const [userInput, setUserInput] = useState<transactionArray>({\n        description: \"\",\n        amount: NaN,\n        id: 0\n    })\n\n    const setTrans = (e: any) => {\n        const { name, value } = e.target;\n        setUserInput((preValue) => {\n            return {\n                ...preValue,\n                [name]: value,\n            };\n        });\n    };\n\n    let add = () => {\n        let id = Math.floor(Math.random() * 1000);\n        userInput.id = id\n        if (userInput.amount == null || userInput.description == \"\") {\n            return swal({\n                text: \"Please Fill All The Fields\",\n                icon: \"warning\",\n                dangerMode: true,\n            });\n        }\n        { addTransaction && addTransaction({ ...userInput, id }) };\n        setUserInput({ description: \"\", amount:NaN , id: 0 });\n    };\n\n    return (\n        <>\n            <div>\n                <p className=\"secName_HistoryI\">Description</p>\n                <input\n                    value={userInput.description}\n                    className=\"inputFields\"\n                    placeholder=\"Detail of Transaction\"\n                    name=\"description\"\n                    required\n                    onChange={(e) => {\n                        setTrans(e);\n                    }}\n                />\n            </div>\n            <div>\n                <p className=\"secName_HistoryI\">Transaction amount</p>\n                <input\n                    value={userInput.amount}\n                    type=\"number\"\n                    className=\"inputFields\"\n                    placeholder=\"Dollar Value of Transaction\"\n                    name=\"amount\"\n                    required\n                    onChange={(e) => {\n                        setTrans(e);\n                    }}\n                />\n            </div>\n            <ActionButton click={add} />\n        </>\n    );\n};\nexport default TransactionInput;","import React from \"react\";\nimport Header from \"../Components/Header\";\nimport CurrentBalance from \"../Components/CurrentBalance\";\nimport Transaction from \"../Components/Transaction\";\nimport TrasactionHistory from \"../Components/TransationHistory\";\nimport TransactionInput from \"../Components/TransactionInput\";\n\nlet TrackerView = () => {\n    return (\n        <div className=\"abc\">\n            <CurrentBalance />\n            <Transaction />\n            <p className=\"secName_History\">History</p>\n            <hr className=\"hr\" />\n            <TrasactionHistory />\n            <p className=\"secName_History\">Add New Transaction</p>\n            <hr className=\"hr\" />\n            <div className=\"ContentBody\">\n                <TransactionInput />\n            </div>\n        </div>\n    );\n};\n\nexport default TrackerView;","import firebase from \"firebase\";\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyDGm-QWOLMRJV-GYE0QX5GtNexhq4Whvjk\",\r\n    authDomain: \"expensetrackerpwa-1a7b6.firebaseapp.com\",\r\n    databaseURL: \"https://expensetrackerpwa-1a7b6.firebaseio.com\",\r\n    projectId: \"expensetrackerpwa-1a7b6\",\r\n    storageBucket: \"expensetrackerpwa-1a7b6.appspot.com\",\r\n    messagingSenderId: \"606033826211\",\r\n    appId: \"1:606033826211:web:217da2b0afc975231b4a16\",\r\n    measurementId: \"G-8S9GQJS2ZE\"\r\n  };\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\nfirebase.analytics();\r\nexport default firebase;","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport TrackerView from \"./View\";\nimport { GlobalProvider } from \"./context/GlobalState\";\nimport firebase from \"./Config/firebase\";\nimport axios from \"axios\";\n\nfunction App() {\n  const [tokens, setTokens] = useState<string>();\n\n  const callToken = async () => {\n    const messaging = firebase.messaging();\n    const token = await messaging.getToken();\n    setTokens(token);\n  };\n  useEffect(() => {\n    callToken();\n    {\n      tokens && checkNoti(tokens || \"\");\n    }\n\n    console.log(\"permision asked\");\n    askForPermissioToReceiveNotifications();\n    return () => {\n      checkNoti(tokens || \"\");\n      // checkNoti(token);\n    };\n  }, [tokens]);\n  const askForPermissioToReceiveNotifications = async () => {\n    try {\n      const messaging = firebase.messaging();\n      await messaging.requestPermission();\n      const token = await messaging.getToken();\n      // getToken(token);\n      return token;\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const checkNoti = (token: string) => {\n    let body = {\n      notification: {\n        title: \"Expense Tracker  App \",\n        body: \"Having trouble expense Check Here...\",\n        icon: \"http://url-to-an-icon/icon.png\",\n      },\n      to: token,\n    };\n    axios({\n      method: \"post\",\n      url: \"https://fcm.googleapis.com/fcm/send\",\n      data: body,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization:\n          \"key=AAAAjRpuUaM:APA91bHqdK-fW3o4xZdd1qRSy9AMXdyn_nTVl53HOWp2BkcKuvvx9Aqsfv8n-AxFJ7vWxZBdAJiCBI0Brk9vvmfHDQrmacV6_QZl8KQ9DECYe06_FWGl3BqQsVojJAPDS5PE-di_QVKD\",\n      },\n    })\n      .then((res) => {\n        console.log(res);\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  };\n  return (\n    <GlobalProvider>\n      <div className=\"App-header\">\n        <div className=\"wrapper\">\n          <TrackerView />\n        </div>\n      </div>\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport swDev from './swDev'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nswDev()\n","export default function swDev() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    let swUrl = `${process.env.PUBLIC_URL}/sw.js`;\r\n    window.addEventListener(\"load\", () => {\r\n      navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(function (response) {\r\n          console.log(\"Service Worker Registered Successfully\", response);\r\n        })\r\n        .catch(function (error) {\r\n          console.error(\r\n            \"Something goes wrong while registering service worker\"\r\n          );\r\n          console.log(error);\r\n        });\r\n    });\r\n  } else {\r\n    console.log(\"Service Worker is not available\");\r\n  }\r\n}\r\n"],"sourceRoot":""}